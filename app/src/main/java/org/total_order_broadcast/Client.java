/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.total_order_broadcast;

import akka.actor.ActorRef;
import akka.actor.Props;
import java.io.Serializable;
import java.util.List;

public class Client extends Node {

    public Client(){
        super(-1,false);
    }

    static public Props props(List<ActorRef> participants) {
        return Props.create(Client.class, Client::new);
    }
    public static class UpdateReq implements Serializable{}
    public void onStartMessage(Node.StartMessage msg) {
        setGroup(msg);
    }
    // the current implementation sends an update message to a random replica
    // issue: the list of participants needs to be kept up to date wrt replicas that have crashed
    public void onSendUpdate(SendUpdate update){
        participants.get((int) (Math.random() * (N_PARTICIPANTS - 1))).tell(new SendUpdate(),getSelf());
    }

    @Override
    public void onRecovery(Recovery msg) {
        // client doesn't crash
    }

    @Override
    public Receive createReceive() {
        return receiveBuilder()
                .match(StartMessage.class,this::onStartMessage)
                .match(SendUpdate.class,this::onSendUpdate)
                .build();
    }

}
